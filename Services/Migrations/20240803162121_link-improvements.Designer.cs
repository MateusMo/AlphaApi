// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Data;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(AlphaContext))]
    [Migration("20240803162121_link-improvements")]
    partial class linkimprovements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Services.Domain.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Clicks")
                        .HasColumnType("bigint")
                        .HasColumnName("Clicks");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("ExpirationDate");

                    b.Property<bool>("Expires")
                        .HasColumnType("bit")
                        .HasColumnName("Expires");

                    b.Property<bool>("HasMessage")
                        .HasColumnType("bit")
                        .HasColumnName("HasMessage");

                    b.Property<bool>("HasPassword")
                        .HasColumnType("bit")
                        .HasColumnName("HasPassword");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int?>("LinkTreeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("LinkTreeId");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Password");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(2000)")
                        .HasColumnName("Url");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LinkTreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Link", (string)null);
                });

            modelBuilder.Entity("Services.Domain.LinkTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Clicks")
                        .HasColumnType("Bigint")
                        .HasColumnName("Clicks");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LinkTree", (string)null);
                });

            modelBuilder.Entity("Services.Domain.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LinkId")
                        .HasColumnType("int")
                        .HasColumnName("LinkId");

                    b.Property<int?>("LinkTreeId")
                        .HasColumnType("int")
                        .HasColumnName("LinkTreeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("LinkTreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Services.Domain.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Clicks")
                        .HasColumnType("bigint")
                        .HasColumnName("Clicks");

                    b.Property<int>("LinkId")
                        .HasColumnType("int")
                        .HasColumnName("LinkId");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("LinkName");

                    b.Property<int>("Photo")
                        .HasColumnType("int")
                        .HasColumnName("Photo");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Ranking", (string)null);
                });

            modelBuilder.Entity("Services.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Email");

                    b.Property<short>("IsActive")
                        .HasColumnType("smallint")
                        .HasColumnName("IsActive");

                    b.Property<short>("IsPremium")
                        .HasColumnType("smallint")
                        .HasColumnName("IsPremium");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Password");

                    b.Property<int>("Photo")
                        .HasColumnType("int")
                        .HasColumnName("Photo");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Services.Domain.Link", b =>
                {
                    b.HasOne("Services.Domain.LinkTree", "LinkTree")
                        .WithMany("Links")
                        .HasForeignKey("LinkTreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Services.Domain.User", "User")
                        .WithMany("Links")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LinkTree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Services.Domain.LinkTree", b =>
                {
                    b.HasOne("Services.Domain.User", "User")
                        .WithMany("LinkTrees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Services.Domain.Post", b =>
                {
                    b.HasOne("Services.Domain.Link", "Link")
                        .WithMany("Posts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Domain.LinkTree", "LinkTree")
                        .WithMany("Posts")
                        .HasForeignKey("LinkTreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Services.Domain.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("LinkTree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Services.Domain.Link", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Services.Domain.LinkTree", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Services.Domain.User", b =>
                {
                    b.Navigation("LinkTrees");

                    b.Navigation("Links");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
